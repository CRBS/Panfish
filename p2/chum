#!/bin/bash

if [ $# -lt 1 ] ; then
   echo "$0 <cluster queue> <directory to push>"
   echo ""
   echo "This script pushes directory specified and its contents"
   echo "to remote cluster corresponding to <cluster queue> specified"
   echo ""
   exit 1
fi

#Maximum retries before giving up on a transfer
MAX_RETRIES=10

#Sleeptime between transfer retries in seconds
RETRY_SLEEP=100

CLUSTER=$1
DIR_TO_PUSH=$2
SCRIPT_TO_FIX=$3

PROP_FILE="`dirname $0`/panfish.properties"

REMOTEBASEDIR=`egrep "^$CLUSTER.basedir" $PROP_FILE | sed "s/^.*= *//"`
REMOTEHOST=`egrep "^$CLUSTER.host" $PROP_FILE | sed "s/^.*= *//"`

DIR_TO_PUSH_PARENT=`dirname $DIR_TO_PUSH`

#
# This function calls mkdir -p on remote host to make sure it exists
#
function create_dir_on_remote {

  #make sure base directory exists on remote server
  FUN=`echo "/bin/mkdir -p $REMOTEBASEDIR/$DIR_TO_PUSH_PARENT"`
  X=1
  while [ $X -le $MAX_RETRIES ]
  do
    echo "Running ssh $REMOTEHOST $FUN"
    OUT=`ssh $REMOTEHOST $FUN 2>&1`
    JOBEXIT=$?
    if [ $JOBEXIT == 0 ] ; then
       return 0
    fi
    echo "Error /bin/mkdir -p $REMOTEBASEDIR/$DIR_TO_PUSH_PARENT : $JOBEXIT : $OUT"
    X=$(( $X + 1 ))
    echo "Sleeping $RETRY_SLEEP before attempting retry $X"
    sleep $RETRY_SLEEP
  done
  return 1
}

#
# This function uses rsync to send data over to remoteblast
#
function send_dir_to_remote {

   CMDXXX="$REMOTEBASEDIR/$DIR_TO_PUSH_PARENT"

   X=1

   while [ $X -le $MAX_RETRIES ]
   do
     echo "Running rsync -rtpz --stats --timeout=180 -e ssh $DIR_TO_PUSH $REMOTEHOST:$CMDXXX"
     OUT=`rsync -rtpz --stats --timeout=180 -e ssh $DIR_TO_PUSH $REMOTEHOST:$CMDXXX 2>&1`
     JOBEXIT=$?
     if [ $JOBEXIT == 0 ] ; then
       echo $OUT
       return 0
     fi

     echo "Error rsync -rtpz --stats --timeout=180 -e ssh $DIR_TO_PUSH $REMOTEHOST:$CMDXXX : $JOBEXIT : $OUT"
     X=$(( $X + 1 ))
     echo "Sleeping $RETRY_SLEEP before attempting retry $X"
     sleep $RETRY_SLEEP
   done
   return 1
}

#create directory on remote host if its not there
create_dir_on_remote

if [ $? != 0 ] ; then
  echo "Unable to create directory $REMOTEBASEDIR/$DIR_TO_PUSH on remote host $REMOTEHOST" 1>&2
  exit 1
fi

#copy directory over to remote host
send_dir_to_remote

if [ $? != 0 ] ; then
  echo "Unable to send $DIR_TO_PUSH to $REMOTEBASEDIR/$DIR_TO_PUSH on remote host $REMOTEHOST" 1>&2
  exit 1
fi

#exit
exit 0
