#!/usr/bin/perl


use FindBin qw($Bin);

#these allow this script to work when installed in alternate path
use lib "$Bin/../lib";
use lib "$Bin/../lib/perl5/site_perl";
use lib "$Bin/../lib/perl5";

use Cwd;

use Getopt::Long;
use Pod::Usage;

use Panfish::PanfishConfig;
use Panfish::Logger;
use Panfish::FileReaderWriterImpl;
use Panfish::PanfishConfigFactory;
use Panfish::JobDatabase;


my $cmdLineParseResult = GetOptions ("cluster=s" => \$clusterArgVal,
                                     "help|?"    => \$helpArg,
                                     "verbose+"  => \$verboseArg,
                                     "man"       => \$manArg) or pod2usage(2);


if ($helpArg || !defined($clusterArgVal)){
  pod2usage(1);
}

if ($manArg){
  pod2usage(-exitstatus => 0, -verbose => 2);
}

my $logger = Panfish::Logger->new();

my $logFileHandle = undef;

my $reader = Panfish::FileReaderWriterImpl->new($logger);
my $configFactory = Panfish::PanfishConfigFactory->new($reader,$logger);
my $config = $configFactory->getPanfishConfig();
$logger->setLevelBasedOnVerbosity($config->getPanfishSubmitVerbosity($clusterArgVal));

my $jobDb = Panfish::JobDatabase->new($reader,
                                      $config->getDatabaseDir($clusterArgVal),$logger);
my $fUtil = Panfish::FileUtil->new($logger);

my $job;
my $line;
my $jobId;
my $taskId;

my $exitVal = 0;
my $jobName;
my $jobNameWithUnderscore;
my $cwd = getcwd();
while(<STDIN>){
    chomp();
    $line = $_;
    # line should contain path to psub file
    # take this file and make a new job file using this as the command
    # write the command to a file using the job database
    # and print out the psub file minus .psub and path prefix.
    if ($line=~/^.*\/(.*)\.(.*)\.psub$/){
        $jobId = $1;
        $taskId = $2;  
        $jobName = $jobId.".".$taskId;
    }  
    else {
        $jobId = $line;
        $jobId=~s/^.*\///;
        $jobId=~s/\.psub//;
        $taskId = "";
        $jobName = $jobId;
    } 
    $logger->debug("Job id: ".$jobName);
    $jobNameWithUnderscore = $jobName;
    $jobNameWithUnderscore=~s/\./_/g; 
    
    $job = Panfish::Job->new("",
                             $jobId,
                             $taskId,
                             "X".$jobNameWithUnderscore,
                             $cwd,
                             undef,
                             Panfish::JobState->BATCHEDANDCHUMMED(),
                             0,
                             undef,
                             $line);

    my $res = $jobDb->insert($job);
    if (!defined($res)){
        print "$jobName\n";
    }
    else {
        $exitVal = 1;
        $logger->error("Unable to submit job $line : $res");
    }
}  
    
exit($exitVal);
1;

__END__

=head1 NAME

panfishsubmit - Remote cluster Panfish submit

=head1 SYNOPSIS

panfishsubmit [ B<options> ]

=head1 DESCRIPTION

B<panfishsubmit> is run on remote cluster to submit the psub jobs.

=head1 OPTIONS

=over 4

=item B<--cluster name>

Defines cluster this program is invoked on

=item B<--verbose>

Verbose mode.  Causes B<panfishsubmit> to print debugging messages.  
Multiple B<--verbose> increase verbosity.  The maximum is 2.

=head1 EXIT STATUS

=over

=item 0     Operation was successful.

=item >0    Error.

=back

=head1 EXAMPLES

=head1 FILES

 hello

=head1 AUTHOR

Christopher Churas <churas@ncmir.ucsd.edu>

=head1 REPORTING BUGS

bugs


=head1 COPYRIGHT

blah blah

=head1 SEE ALSO

more blah



=cut
