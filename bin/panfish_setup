#!/usr/bin/perl


use FindBin qw($Bin);

#these allow this script to work when installed in alternate path
use lib "$Bin/../lib";
use lib "$Bin/../lib/perl5/site_perl";
use lib "$Bin/../lib/perl5";

use Getopt::Long;
use Pod::Usage;

use Panfish::ForkExecutor;
use Panfish::SSHExecutor;
use Panfish::PanfishConfig;
use Panfish::Logger;
use Panfish::PanfishConfigFactory;
use Panfish::FileReaderWriterImpl;
use Panfish::FileUtil;
use Panfish::RemoteIO;
use Panfish::FileJobDatabase;
use Cwd;

if (@ARGV == 0){
  pod2usage(2);
}


my $cmdLineParseResult = GetOptions ("sync=s"       => \$syncArgValue,
                                     "syncall"      => \$syncallArg,
                                     "writeconfig"  => \$writeConfigArg,
                                     "setupdb"      => \$setupDbArg,
                                     "examinedir=s" => \$examineDirArg,
                                     "removedir=s"  => \$removeDirArg,
                                     "verbose+"     => \$verboseArg,
                                     "help|?"       => \$helpArg,
                                     "man"          => \$manArg) or pod2usage(2);


if ($helpArg){
  pod2usage(1);
}

if ($manArg){
  pod2usage(-exitstatus => 0, -verbose => 2);
}

# force auto flush for standard out
local $| = 1;

my $logger = Panfish::Logger->new();

# sets the logging level based on number of times verbose flag 
# was passed into command
$logger->setLevelBasedOnVerbosity($verboseArg);

my $readerWriter = Panfish::FileReaderWriterImpl->new($logger);
my $fUtil = Panfish::FileUtil->new($logger);
 
# if writeconfig argument is set then take input of standard in and
# write to panfish.config in same directory as binary ie dirname($0)
if (defined($writeConfigArg)){
   my $panfishConfig = $fUtil->getDirname($0)."/panfish.config";

   $logger->info("Writing $panfishConfig configuration file");

   $readerWriter->openFile(">$panfishConfig");

   while(<STDIN>){
      $readerWriter->write($_);
   }
   $readerWriter->close();
   exit(0);
}


my $configFactory = Panfish::PanfishConfigFactory->new($readerWriter,$logger);
my $config = $configFactory->getPanfishConfig();
my $exec = Panfish::ForkExecutor->new();
my $sshExec = Panfish::SSHExecutor->new($config,$exec,$logger);
my $uploader = Panfish::RemoteIO->new($config,$sshExec,$logger);
my $fUtil = Panfish::FileUtil->new($logger);

# if --examinedir argument is set get the size of the directory and
# return information on that path in configuration file format
if (defined($examineDirArg)){
   my ($numFiles,$numDirs,$numSymLinks,$sizeInBytes,$error) = $fUtil->getDirectorySize($examineDirArg);
   print "num.files=$numFiles\n";
   print "num.dirs=$numDirs\n";
   print "num.symlinks=$numSymLinks\n";
   print "size.in.bytes=$sizeInBytes\n";
   print "error=";
   if (defined($error)){
     print "$error\n";
     exit(1);
   }
   
   print "\n";
   exit(0);
}

if (defined($removeDirArg)){

   # clean up the path
   $removeDirArg = $fUtil->standardizePath($removeDirArg);

   print "Path to remove: $removeDirArg\n";

   # dont let . or .. or / /// get passed to delete method
   if ($removeDirArg =~ /\.$/ ||
       $removeDirArg =~ /^\/+$/){
      print STDERR "Invalid path $removeDirArg\n";
      exit(1);
   }
   
   if ( ! -e $removeDirArg){
      print STDERR "Path $removeDirArg does not exist\n";
      exit(0);
   }

   # dont allow any path not under base directory
   if (index($removeDirArg,$config->getBaseDir()) != 0){
      print STDERR "Path must be under ".$config->getBaseDir()."\n";
      exit(1);
   }

   if ($fUtil->recursiveRemoveDir($removeDirArg) == 1){
      exit(0);
   }
   print STDERR "There was an error removing $remoteDirArg\n";
   exit(1);
}


# initialize the job database
if (defined($setupDbArg)){
   $logger->info("Initializing Database ".$config->getDatabaseDir());
   my $jobDb = Panfish::FileJobDatabase->new($readerWriter,$config->getDatabaseDir(),$logger);
   my ($error,@clusterList) = $config->getClusterListAsArray();
   if (defined($error)){
      $logger->fatal("Problems getting list of clusters needed to initialize db : $error");
      exit(1);
   }
   for (my $x = 0; $x < @clusterList; $x++){
      if ($jobDb->initializeDatabase($clusterList[$x]) == 0){
          $logger->fatal("unable to initialize database $clusterList[$x]");
         exit(1);
      }
   }
   exit(0);
}

my $cluster = undef;


# user wishes to synchronize configuration with remote cluster
if (defined($syncArgValue) || defined($syncallArg)){

   my $cList = undef;
   if (defined($syncArgValue)){
     $cList = $syncArgValue;
   }

   my ($error,@clusterList) = $config->getClusterListAsArray($cList);
   if (defined($error)){
     $logger->fatal("Unable to synchronize to cluster : $cList : not in valid cluster list");
     exit(1);
   }
  my $startTime = 0;
  my $duration = 0;
  my $libDir = getLibDirToSync($fUtil,$logger);
  
  my @binaries = getBinariesToSync($fUtil);  

  for (my $x = 0; $x < @clusterList; $x++){
     if ($clusterList[$x] eq $config->getThisCluster()){
        $logger->debug("Skipping $clusterList[$x] since its the local cluster");
        next;
     }
     $cluster = $clusterList[$x];

     print "Synchronizing $cluster ...";
     $startTime = time();
     #create basedir
     $sshExec->setStandardInputCommand(undef);
     $sshExec->setCluster($cluster);
     $sshExec->enableSSH();
     $exit = $sshExec->executeCommand("/bin/mkdir -p ".$config->getBaseDir($cluster),60);
     if ($exit != 0){
         print " failed\n";
         $logger->error("Unable to run ".$sshExec->getCommand().
                               "  : ".$sshExec->getOutput());
         
          exit(4);
     }

     #lets upload to remote cluster to match config
     my $remoteBinDir = $config->getBinDir($cluster)."/";

     $logger->debug("Remote cluster bin dir: ".$remoteBinDir);

     for (my $x = 0; $x < @binaries; $x++){
         $res = $uploader->directUpload($binaries[$x],$remoteBinDir,$cluster);
         if (defined($res)){
             print " failed\n";
             $logger->fatal("Unable to upload $binaries[$x] : $res");
            
             exit(3);
         }
     }

     #upload the lib directory to parent directory of remoteBinDir
     my $remoteBinParent = $fUtil->getDirname($remoteBinDir);
     $res = $uploader->directUpload($libDir,$remoteBinParent,$cluster);
 
     #create panfish.config and upload to directory where binaries reside
     my @lines = $config->getConfigForCluster($cluster); 
     for (my $x = 0; $x < @lines; $x++){
        $lines[$x]=~s/`/\\`/g;
        # setup echo command to invoke on remote cluster via ssh
        if ($echoArgs eq ""){
            $echoArgs = $lines[$x];
        }
        else {
            $echoArgs .= "\\\\n$lines[$x]";
        }
     }
     $sshExec->setCluster($cluster);
     $sshExec->setStandardInputCommand("/bin/echo -e \"$echoArgs\"");
     $sshExec->enableSSH();
     $exit = $sshExec->executeCommand($remoteBinDir."/panfish_setup --writeconfig",60);
     if ($exit != 0){
         print " failed\n";
         $logger->error("Unable to run ".$sshExec->getCommand().
                               "  : ".$sshExec->getOutput()); 
        
          exit(4);
     }
 


     #call panfish_setup on remote cluster to initialize database
     initializeDatabase($sshExec,$logger,$cluster,$remoteBinDir);

     $duration = time() - $startTime;

     print " done.  Took $duration seconds\n";
   }
   exit(0);   
}


#
# initializes database on remote cluster
#
sub initializeDatabase {
   my $sshExec = shift;
   my $logger = shift;
   my $cluster = shift;
   my $remoteBinDir = shift;

   $sshExec->setStandardInputCommand(undef);
   $sshExec->setCluster($cluster);
   $sshExec->enableSSH();
   $logger->debug("Running $remoteBinDir/panfish_setup --setupdb");
     $exit = $sshExec->executeCommand($remoteBinDir."/panfish_setup --setupdb",60);
     if ($exit != 0){
          $logger->error("Unable to run ".$sshExec->getCommand().
                                 "  : ".$sshExec->getOutput());
          exit(4);
     }
   return undef;
}



# 
# Gets path to lib directory that needs to be sync'd to
# remote clusters
sub getLibDirToSync {
  my $fUtil = shift;
  my $logger = shift;
  my $libDir = "";
   #find lib directory and upload to remote cluster
   for (my $x = 0; $x < @INC; $x++){
      if ( -d "$INC[$x]/Panfish" ){
          $libDir = "$INC[$x]/Panfish";
          $logger->info("Lib Directory: $libDir");
          break;
      }
   }
   return $fUtil->getDirname($libDir);
}


#
# Gets list of binaries that needs to be sync'd to remote
# clusters
#
#
sub getBinariesToSync {
   my $fUtil = shift;
   my $localBinDir = $fUtil->getDirname($0);

   my @binaries;
   push(@binaries,"$localBinDir/panfish");
   push(@binaries,"$localBinDir/panfishsubmit");
   push(@binaries,"$localBinDir/panfishstat");
   push(@binaries,"$localBinDir/panfishjobrunner");
   push(@binaries,"$localBinDir/panfish_setup");
   return @binaries;
}


1;

__END__

=head1 NAME

panfish_setup - Assists in configuration of panfish

=head1 SYNOPSIS

panfish_setup [ B<options> ] 

=head1 DESCRIPTION

B<panfish_setup> Manages configuration of panfish and synchronizes
changes to remote clusters.

=head1 OPTIONS


=over 4

=item B<--examinedir directory>

Outputs information about B<directory> passed in such as number
of files and directories and total bytes in that path.  Output
is in this format:

num.files=AA

num.dirs=BB

num.symlinks=CC

size.in.bytes=DD

error=

The AA,BB,CC,DD would be set to values for path and B<error's> value 
would be blank unless there was a problem in which case it would be set. 
Also the program will exit with non zero exit code if there is a problem

=item B<--removedir directory>

Removes directory specified.  Code will exit with 0 exit code upon success or 1 upon failure.

=item B<--setupdb>
Sets up Job database directory for current cluster

=item B<--sync cluster>

Synchronizes configuration to remote cluster.  This includes copying binaries
and necessary configuration files.  B<cluster>  can be a single cluster or a 
comma delimited list of clusters

=item B<--syncall>

This method is the same as B<--sync> but for all clusters defined in the configuration.

=item B<--writeconfig>

Tells B<panfish_setup> to take any input from standard in and write it to panfish.config.
This is used to initialize the configuration on a remote cluster.

=item B<--verbose>

Verbose mode.  Causes B<panfish_setup> to print debugging messages.  
Multiple B<--verbose> options increase verbosity.  The maximum is 2.

=head1 EXIT STATUS

=over

=item 0     Operation was successful.

=item >0    Error.

=back

=head1 EXAMPLES

=head1 FILES

 hello

=head1 AUTHOR

Christopher Churas <churas@ncmir.ucsd.edu>

=head1 REPORTING BUGS

bugs


=head1 COPYRIGHT

blah blah

=head1 SEE ALSO

more blah



=cut
