#!/usr/bin/perl


use FindBin qw($Bin);

#these allow this script to work when installed in alternate path
use lib "$Bin/../lib";
use lib "$Bin/../lib/perl5/site_perl";
use lib "$Bin/../lib/perl5";

use Getopt::Long;
use Pod::Usage;

use Panfish::ForkExecutor;
use Panfish::SSHExecutor;
use Panfish::PanfishConfig;
use Panfish::Logger;
use Panfish::PanfishConfigFactory;
use Panfish::FileReaderWriterImpl;
use Panfish::FileUtil;
use Panfish::RsyncUploader;
use Cwd;

if (@ARGV == 0){
  pod2usage(2);
}


my $cmdLineParseResult = GetOptions ("syncall=s"  => \$syncallArgValue,
                                     "verbose+"   => \$verboseArg,
                                     "help|?"     => \$helpArg,
                                     "man"        => \$manArg) or pod2usage(2);


if ($helpArg){
  pod2usage(1);
}

if ($manArg){
  pod2usage(-exitstatus => 0, -verbose => 2);
}

my $logger = Panfish::Logger->new();

# sets the logging level based on number of times verbose flag 
# was passed into command
$logger->setLevelBasedOnVerbosity($verboseArg);

my $reader = Panfish::FileReaderWriterImpl->new($logger);
my $configFactory = Panfish::PanfishConfigFactory->new($reader,$logger);
my $config = $configFactory->getPanfishConfig();
my $exec = Panfish::ForkExecutor->new();
my $sshExec = Panfish::SSHExecutor->new($config,$exec,$logger);
my $uploader = Panfish::RsyncUploader->new($config,$sshExec,$logger);
my $fUtil = Panfish::FileUtil->new($logger);

# force auto flush for standard out
local $| = 1;

# user wishes to synchronize configuration with remote cluster
if (defined($syncallArgValue)){
   my ($error,@clusterList) = $config->getClusterListAsArray($syncallArgValue);
   if (defined($error)){
     $logger->fatal("Unable to synchronize to cluster not in valid cluster list");
     exit(1);
  }
 

   #find local binaries directory and upload to remote cluster
   my $binaryDir = $fUtil->getDirname($0); 
   $logger->info("Binary Directory: $binaryDir");
   my $libDir = "";
   #find lib directory and upload to remote cluster
   for (my $x = 0; $x < @INC; $x++){
      print "$x $INC[$x]\n";
      if ( -d "$INC[$x]/Panfish" ){
          $libDir = "$INC[$x]/Panfish";
          $logger->info("Lib Directory: $libDir");
          break;
      }
   }

   #lets upload to remote cluster to match config


   #create panfish.config and upload to directory where binaries reside

   #call panfish_setup on remote cluster to initialize database
   
    
}


1;

__END__

=head1 NAME

panfish_setup - Assists in configuration of panfish

=head1 SYNOPSIS

panfish_setup [ B<options> ] 

=head1 DESCRIPTION

B<panfish_setup> Manages configuration of panfish and synchronizes
changes to remote clusters.

=head1 OPTIONS


=over 4

=item B<--syncall cluster>

Synchronizes configuration to remote cluster.  This includes copying binaries
and necessary configuration files.

=item B<--verbose>

Verbose mode.  Causes B<chum> to print debugging messages.  Multiple B<--verbose> options increase
verbosity.  The maximum is 2.

=head1 EXIT STATUS

=over

=item 0     Operation was successful.

=item >0    Error.

=back

=head1 EXAMPLES

=head1 FILES

 hello

=head1 AUTHOR

Christopher Churas <churas@ncmir.ucsd.edu>

=head1 REPORTING BUGS

bugs


=head1 COPYRIGHT

blah blah

=head1 SEE ALSO

more blah



=cut
