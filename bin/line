#!/usr/bin/perl


use FindBin qw($Bin);

#these allow this script to work when installed in alternate path
use lib "$Bin/../lib";
use lib "$Bin/../lib/perl5/site_perl";
use lib "$Bin/../lib/perl5";

use Cwd;
use IO::Handle;


use Getopt::Long;
use Pod::Usage;

use Panfish::ForkExecutor;
use Panfish::PanfishConfig;
use Panfish::Logger;
use Panfish::FileReaderWriterImpl;
use Panfish::PanfishConfigFactory;
use Panfish::Job;
use Panfish::JobState;
use Panfish::FileJobDatabase;

use Panfish::ForkExecutor;

my $SIGTERMCALLED = 0;
my $SIGUSR1CALLED = 0;
my $SIGUSR2CALLED = 0;

#catch the term signal and set a variable which will cause code to
#leave while loop gracefully
$SIG{TERM} = sub { $SIGTERMCALLED = 1; print stderr "Received TERM signal\n";};
$SIG{USR1} = sub { $SIGUSR1CALLED = 1; print stderr "Received USR1 signal\n";};
$SIG{USR2} = sub { $SIGUSR2CALLED = 1; print stderr "Received USR2 signal\n";};


if (@ARGV == 0){
  pod2usage(2);
}


my $cmdLineParseResult = GetOptions ("e=s"      => \$eArgValue,
                                     "o=s"      => \$oArgValue,
                                     "c=s"      => \$cArgValue,
                                     "batchfactor=i" => \$batchFactorArgValue,
                                     "writeoutputlocal" => \$writeOutputLocalArg,
                                     "help|?"   => \$helpArg,
                                     "man"      => \$manArg) or pod2usage(2);


if ($helpArg){
  pod2usage(1);
}

if ($manArg){
  pod2usage(-exitstatus => 0, -verbose => 2);
}

# force auto flush of stderr and standard out
STDERR->autoflush(1);
STDOUT->autoflush(1);


my $logger = Panfish::Logger->new();

my $stderr = "";
my $stdout = "";

if (defined($eArgValue)){
    $stderr = $eArgValue;
}
else {
    $logger->fatal("-e flag must be set to define stderr file path");
    exit(1);
}
if (defined($oArgValue)){
    $stdout = $oArgValue;
}
else {
    $logger->fatal("-o flag must be set to define stdout file path");
    exit(1);
}

if (!defined($cArgValue)){
  $logger->fatal("Must define -c <command> parameter");
  exit(1);
}

if (defined($batchFactorArgValue) && $batchFactorArgValue <= 0){
  $logger->fatal("--batchfactor flag must be an integer greater then zero");
  exit(1);
}

my $rawCommand = $cArgValue;

my $readerWriter = Panfish::FileReaderWriterImpl->new($logger);
my $configFactory = Panfish::PanfishConfigFactory->new($readerWriter,$logger);
my $config = $configFactory->getPanfishConfig();
$logger->setLevelBasedOnVerbosity($config->getLineVerbosity());

# Find the queue we are running under as well as job and task id
my $cluster = $ENV{"QUEUE"};
my $jobId = $ENV{"JOB_ID"};
my $taskId = $ENV{"SGE_TASK_ID"};
my $jobName = $ENV{"JOB_NAME"};
my $taskStepSize = $ENV{"SGE_TASK_STEPSIZE"};
my $taskLast = $ENV{"SGE_TASK_LAST"};

if (!defined($taskId)){
   $taskId = $ENV{"GE_TASK_ID"};
}

my $jobIdWithTaskID = "";
if (!defined($taskId) ||
   $taskId eq "undefined"){
   $jobIdWithTaskId = $jobId;
   $taskId = undef;
}
else {
   $jobIdWithTaskId = $jobId.".".$taskId;
}
   
$logger->info("Job: ($jobIdWithTaskId) JobName: ($jobName) Cluster: ($cluster)");


# set the base directory to the value for the cluster defined by the QUEUE environment variable
# UNLESS the cluster matches this cluster in which case leave the $baseDir set to an empty
# string cause the job will be running on this cluster anyways.
my $baseDir = "";
if ($cluster ne $config->getThisCluster()){
    $baseDir = $config->getBaseDir($cluster);
}

my $scratch = $config->getScratchDir($cluster);


my $stdErrOut = getStandardErrorOutput($stdout,$stderr,$writeOutputLocalArg);

my $command = "export PANFISH_BASEDIR=\"".$baseDir."\";".
              "export PANFISH_SCRATCH=\"".$scratch."\";".
              "export JOB_ID=\"".$jobId."\";".
              "export SGE_TASK_ID=\"".$taskId."\";".
              "export SGE_TASK_STEPSIZE=\"".$taskStepSize."\";".
              "export SGE_TASK_LAST=\"".$taskLast."\";".
              "\$PANFISH_BASEDIR".$rawCommand." $stdErrOut";
                

# Save job to database
my $job = Panfish::Job->new($cluster,$jobId,$taskId,$jobName,getcwd(),$command,
                            Panfish::JobState->SUBMITTED(),undef,undef,undef,undef,undef,
                            $batchFactorArgValue);

my $jobDb = Panfish::FileJobDatabase->new($readerWriter,$config->getDatabaseDir(),$logger);

my $res = $jobDb->insert($job);

if (defined($res)){
   $logger->error("Unable to update job state: $res");
   exit(1);
}

my $sleepTime = $config->getLineSleepTime();

$logger->debug("Sleeping $sleepTime after job insertion");

sleep $sleepTime;

# Wait for the above file to move into done or failed directory
$jobState = $jobDb->getJobStateByClusterAndId($cluster,$jobId,$taskId);

my $lastState = Panfish::JobState->UNKNOWN();

while ($jobState ne Panfish::JobState->DONE() &&
       $jobState ne Panfish::JobState->FAILED()){
       
    handleSignal($jobDb,$job,$logger);
    

    # append to log at info level when the job changes states
    if ($lastState ne $jobState){
        $logger->info("Job has switched state from $lastState to ".$jobState);
        $lastState = $jobState;
    }

    # in debug mode log every check
    $logger->debug("Sleeping $sleepTime seconds cause job state is: ".$jobState);

    sleep $sleepTime;

    handleSignal($jobDb,$job,$logger);

    $jobState = $jobDb->getJobStateByClusterAndId($cluster,$jobId,$taskId);
}

$logger->info("Real job exited in state... ".$jobState);

#if state failed log a message saying so
if ($jobState eq Panfish::JobState->FAILED()){
   $logger->error("Job exited in failed state");
   exit(1);
}

# if state is done just remove the job from the database
if ($jobState eq Panfish::JobState->DONE()){
   $logger->debug("Removing job from database");
   $job->setState($jobState);
   my $res = $jobDb->delete($job);
   if (defined($res)){
       $logger->error("Unable to delete job from database : $res");
   }
}

exit(0);


#
#
#
sub handleSignal {
    my $jobDb = shift;
    my $job = shift;
    my $logger = shift;

    if ($SIGTERMCALLED == 1 ||
        $SIGUSR1CALLED == 1 ||
        $SIGUSR2CALLED == 1){
       $logger->fatal("Signal received.  Killing job and exiting...");
       my $res = $jobDb->kill($job);
       if (defined($res)){
          $logger->error("There was a problem trying to kill real job : $res");
       }
       exit(50);
    }
}

#
# Generates correct redirects of standard error and output
# If writeOutputLocalArg is not defined just redirect stderr and stdout to files specified by the user with $PANFISH_BASEDIR prefix
# If writeOutputLocalArg is defined then redirect stderr and stdout to files under $PANFISH_SCRATCH and add
# mv commands to put them in the correct location upon script completion.  If stdout or stderr is /dev/null
# The $PANFISH_SCRATCH and PANFISH_BASEDIR is skipped and so is the mv command.
#

sub getStandardErrorOutput {
    my $stdout = shift;
    my $stderr = shift;
    my $writeOutputLocalArg = shift;

    my ($stdOutRedirect,$stdOutMv) = getRedirectOutput(">",$stdout,"out",$writeOutputLocalArg);
    my ($stdErrRedirect,$stdErrMv) = getRedirectOutput("2>",$stderr,"err",$writeOutputLocalArg);

    return $stdOutRedirect." ".$stdErrRedirect.$stdOutMv.$stdErrMv;
}

sub getRedirectOutput {
   my $redirectSymbol = shift;
   my $outFile = shift;
   my $suffix = shift;
   my $writeOutputLocalArg = shift;

   if ($outFile eq "/dev/null"){
      return ($redirectSymbol." ".$outFile,"");
   }

   if (!defined($writeOutputLocalArg)){
      return ($redirectSymbol." \$PANFISH_BASEDIR".$outFile,"");
   }

   return ($redirectSymbol." \$PANFISH_SCRATCH/\$JOB_ID.\$SGE_TASK_ID.$suffix",";/bin/mv \$PANFISH_SCRATCH/\$JOB_ID.\$SGE_TASK_ID.$suffix \$PANFISH_BASEDIR$outFile");
}


1;

__END__

=head1 NAME

line - The shadow job run on local Grid Engine responsible for submission and monitoring of real job on Panfish Multicluster Grid Engine Wrapper

=head1 SYNOPSIS

line [ B<options> ]

=head1 DESCRIPTION

B<Line> is the shadow job submitted by B<cast> and is responsible for
submitting the real job to Panfish Multicluster Grid Engine Wrapper.  This
command also monitors the real job for completion.

The advantage of this design is the user can invoke standard Grid Engine
commands (qdel, qstat,etc.) on B<line> to administer the job.

B<NOTE:>  It is the responsibility of the caller to invoke B<land> to 
retrieve the data from the remote cluster once the job completes.

=head1 OPTIONS

Lots of options here

=over 4

=item B<--batchfactor integer X>

Defines a multiplier known as a batch job factor which causes jobs to be batched by X times on each node and run through
in a serial fashion.  This exists to reduce demand on schedulers for fast running jobs.  For example, if a compute node can
run 8 jobs in parallel and a batch factor of 2 is set then a panfish job submitted to that compute node will be given 16 jobs
to run in 8 job batches.

=item B<-c command>

Defines the command to run.  This needs to be a bash shell script.

This B<command> must be a script file, its the last argument and must meet the following conditions:

=over 12

=item Any Grid Engine directives ie B<#$> in the B<command> script will be ignored.  Please use B<#$PANFISH> directives.

Z<>

=item B<Command> must be a bash script invoking commands and tools that can be run on any of the remote clusters.

Z<>

=item B<Command> must use B<PANFISH_BASEDIR> variable to prefix any paths.  A list of all environment variables that will be
set can be seen in the B<ENVIRONMENT VARIABLES> section below.

Z<>

=item B<Command> must NOT assume output from any other job enqueued or running in B<Panfish> will be available to it.

Z<>

=back

=item B<-e path,...>

Defines path of standard error stream.  
The following variables can be used in construction of the path and will be set appropriately:

=over 8

=item $USER       user ID of job owner

=item $JOB_ID     current job ID

=item $SGE_TASK_ID    array job task index number

Z<>

=back

This value can also be set within the B<command> using
the B<#$PANFISH> directive.

=item B<-o path,...>

Defines path of standard output stream.  See B<-e> description for allowed 
variables in B<path>  This value can also be set within the B<command> using
the B<#$PANFISH> directive.

=item B<--writeoutputlocal>

If set, directs users program to write stderr and stdout files to $PANFISH_SCRATCH folder naming them 
JOBID.TASKID.out/err.  When the users program completes the output files are copied to destination specified
by B<-e> and B<-o> parameters

=item B<--verbose>

Verbose mode.  Causes B<cast> to print debugging messages.  Multiple B<--verbose> increase
verbosity.  The maximum is 2.

NOTE:  This is not an option in B<qsub>.

=back

=head1 EXIT STATUS

=over

=item 0     Operation was successful.

=item >0    Error.

=back

=head1 EXAMPLES

=head1 FILES

 hello

=head1 AUTHOR

Christopher Churas <churas@ncmir.ucsd.edu>

=head1 REPORTING BUGS

bugs


=head1 COPYRIGHT

blah blah

=head1 SEE ALSO

more blah



=cut
