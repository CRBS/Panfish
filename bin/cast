#!/usr/bin/perl


use FindBin qw($Bin);

#these allow this script to work when installed in alternate path
use lib "$Bin/../lib";
use lib "$Bin/../lib/perl5/site_perl";
use lib "$Bin/../lib/perl5";

use Getopt::Long;
use Pod::Usage;

use Panfish::ForkExecutor;
use Panfish::PanfishConfig;
use Panfish::Logger;
use Panfish::FileReaderWriterImpl;
use Panfish::PanfishConfigFactory;

if (@ARGV == 0){
  pod2usage(2);
}


my $cmdLineParseResult = GetOptions ("q=s"      => \$qArgValue,
                                     "t=s"      => \$tArgValue,
                                     "e=s"      => \$eArgValue,
                                     "o=s"      => \$oArgValue,
                                     "dir=s"    => \$dirArgValue,
                                     "verbose+" => \$verboseArg,
                                     "help|?"   => \$helpArg,
                                     "man"      => \$manArg) or pod2usage(2);


if ($helpArg){
  pod2usage(1);
}

if ($manArg){
  pod2usage(-exitstatus => 0, -verbose => 2);
}

if (@ARGV < 1){
  pod2usage(2);
}

my $command = "";
 
for (my $x = 0; $x < @ARGV; $x++){
   $command .= " $ARGV[$x]";  
}

my $stderr = "";

my $stdout = "";

if (defined($eArgValue)){
   $stderr = " -e $eArgValue";
}

if (defined($oArgValue)){
   $stdout = " -o $oArgValue";
}

my $logger = Panfish::Logger->new();

# sets the logging level based on number of times verbose flag 
# was passed into command
$logger->setLevelBasedOnVerbosity($verboseArg);

my $reader = Panfish::FileReaderWriterImpl->new($logger);
my $configFactory = Panfish::PanfishConfigFactory->new($reader,$logger);
my $config = $configFactory->getPanfishConfig();
my $exec = Panfish::ForkExecutor->new();

# escape any $ for TASK_ID and JOB_ID
# also change TASK_ID to SGE_TASK_ID
$stderr=~s/\$TASK_ID/\\\$SGE_TASK_ID/g;
$stderr=~s/\$JOB_ID/\\\$JOB_ID/g;
$stdout=~s/\$TASK_ID/\\\$SGE_TASK_ID/g;
$stdout=~s/\$JOB_ID/\\\$JOB_ID/g;


my $newArgList = "-b y -cwd -notify";
# lets build a new argument list for the qsub call
if (defined($tArgValue)){
    $newArgList .= " -t $tArgValue";
    $taskIdErrVar = ".\\\$TASK_ID.err";
    $taskIdOutVar = ".\\\$TASK_ID.out";
}
else {
    $taskIdErrVar = ".err";
    $taskIdOutVar = ".out";
}

# verify the list of queues specified is valid
#
my ($error,$cList) = $config->getCommaDelimitedClusterList($qArgValue);
$logger->debug("Cluster list: $cList");
if (defined($error)){
    $logger->fatal("Invalid queue/cluster list set via -q flag : $error");
    exit(1);
}
$newArgList .= " -q ".$cList;

my $dir = "";
if (defined($dirArgValue)){
   $dir = " -dir $dirArgValue";
}

my $taskId = "";

$cmd = $config->getQsubPath()." $newArgList -e ".
       $config->getLineStandardErrorPath()."/\\\$JOB_ID".$taskIdErrVar." -o ".
       $config->getLineStandardOutPath()."/\\\$JOB_ID".$taskIdOutVar." ".
       $config->getLineCommand()."$stdout$stderr$dir $command";

$logger->info("Running command: $cmd");

my $exitCode = $exec->executeCommand($cmd,30);



print $exec->getOutput();
$logger->info("Exit Code:  ".$exec->getExitCode());
exit($exitCode);
1;

__END__

=head1 NAME

cast - Submit a job to Panfish Multicluster Grid Engine Wrapper

=head1 SYNOPSIS

cast [ B<options> ] [ B<command> ]

=head1 DESCRIPTION

B<Cast> submits jobs to Panfish Multicluster Grid Engine
Wrapper which allows a script based serial B<command> 
to be run on a remote cluster. 

B<Cast> does this by a submission of a shadow job to the local Grid Engine.  
Once started, the shadow job then handles running and monitoring of the 
actual B<command> on the remote cluster.  Upon B<command> completion the 
shadow job exits.  The caller of B<cast> can monitor the status of their 
job by using B<qstat> on the id of the shadow jobs output from the 
B<cast> call.

B<NOTE:>  It is the responsibility of the caller to invoke B<land> to 
retrieve the data from the remote cluster once the job completes.

=head1 OPTIONS

B<Cast> only implements a small subset of the options in B<qsub> which are
described as follows.

=over 4

=item B<-t [-m[:s]]>

Submits an array job with the environment variable B<SGE_TASK_ID> set to index number of job.   

=item B<-e path,...>

Defines path of standard error stream.  
The following variables can be used in construction of the path and will be set appropriately:

=over 8

=item $USER       user ID of job owner

=item $JOB_ID     current job ID

=item $TASK_ID    array job task index number

Z<>

=back

This value can also be set within the B<command> using
the B<#$PANFISH> directive.

=item B<-o path,...>

Defines path of standard output stream.  See B<-e> description for allowed 
variables in B<path>  This value can also be set within the B<command> using
the B<#$PANFISH> directive.


=item B<-q wc_queue_list>

Defines list of queues this job can run under.  The queues should correspond to
valid shadow queues.  This value can also be set within the B<command> using
the B<#$PANFISH> directive.

=item B<-dir path>

Defines directory to upload to remote clusters.  B<Cast> will upload the contents of
this directory to all remote clusters in B<-q> queue list when set.  If not set no
upload operation is performed.  This value can also be set within the B<command> using
the B<#$PANFISH> directive.  

NOTE:  This is not an option in B<qsub>.

=item B<--verbose>

Verbose mode.  Causes B<cast> to print debugging messages.  Multiple B<--verbose> increase
verbosity.  The maximum is 3.

NOTE:  This is not an option in B<qsub>.


=item B<command>

The job to run.  This B<command> must be a script file, its the last argument and must meet the following conditions:

=over 12

=item Any Grid Engine directives ie B<#$> in the B<command> script will be ignored.  Please use B<#$PANFISH> directives.

Z<>

=item B<Command> must be a bash script invoking commands and tools that can be run on any of the remote clusters.

Z<>

=item B<Command> must use B<PANFISH_BASEDIR> variable to prefix any paths.  A list of all environment variables that will be
set can be seen in the B<ENVIRONMENT VARIABLES> section below.

Z<>

=item B<Command> must NOT assume output from any other job enqueued or running in B<Panfish> will be available to it.

Z<>

=back



=head1 ENVIRONMENT_VARIABLES

The following environment variables are set for B<command> run on remote 
clusters. 

Z<>

=over 16

=item PANFISH_SCRATCH_DIR   Path to temp directory.

=item PANFISH_BASEDIR      Base path of filesystem on remote clusters.  This should be
                           prefixed on all paths in script.

=item SGE_TASK_ID          Task ID of job.  If non array job is submitted this will be empty.

=back 

Z<>



=head1 RESTRICTIONS

B<Panfish> relies on environment variables to alias paths so all
paths refered by B<Command> must be relative or utilize B<ENVIRONMENT VARIABLES>
listed above.


=head1 EXIT STATUS

=over

=item 0     Operation was successful.

=item >0    Error.

=back

=head1 EXAMPLES

=head1 FILES

 hello

=head1 AUTHOR

Christopher Churas <churas@ncmir.ucsd.edu>

=head1 REPORTING BUGS

bugs


=head1 COPYRIGHT

blah blah

=head1 SEE ALSO

more blah



=cut
